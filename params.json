{"google":"UA-22050912-1","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Mustache templates for Lua","body":"# lustache - Logic-less {{mustache}} templates with Lua\r\n\r\n> What could be more logical awesome than no logic at all?\r\n\r\n[lustache](http://github.com/Olivine-Labs/lustache) is an implementation of the\r\n[mustache](http://mustache.github.com/) template system in Lua.\r\n\r\n[Mustache](http://mustache.github.com/) is a logic-less template syntax. It can\r\nbe used for HTML, config files, source code - anything. It works by expanding\r\ntags in a template using values provided in a hash or object.\r\n\r\nWe call it \"logic-less\" because there are no if statements, else clauses, or for\r\nloops. Instead there are only tags. Some tags are replaced with a value, some\r\nnothing, and others a series of values.\r\n\r\nFor a language-agnostic overview of mustache's template syntax, see the\r\n`mustache(5)` [manpage](http://mustache.github.com/mustache.5.html).\r\n\r\n## Where to use lustache?\r\n\r\nYou can use lustache to render mustache templates anywhere you can use Lua.\r\n\r\nlustache exposes itself as a module, so you only have to require the file. and assign it.\r\n\r\n## Usage\r\n\r\n### Installation\r\n\r\nDownload lustache.lua and place it in your project, or install it with [luarocks](http://luarocks.org/en/Download)\r\nusing `luarocks install lustache`.  On OSX, you can `brew install luarocks`.\r\n\r\nBelow is quick example how to use lustache:\r\n\r\n    lustache = require \"lustache\"\r\n\r\n    view_model = {\r\n      title = \"Joe\",\r\n      calc = function ()\r\n        return 2 + 4;\r\n      end\r\n    }\r\n\r\n    output = lustache.render(\"{{title}} spends {{calc}}\", view)\r\n\r\nIn this example, the `lustache.render` function takes two parameters: 1) the\r\n[mustache](http://mustache.github.com/) template and 2) a `view_model` object\r\nthat contains the data and code needed to render the template.\r\n\r\n## Templates\r\n\r\nA [mustache](http://mustache.github.com/) template is a string that contains\r\nany number of mustache tags. Tags are indicated by the double mustaches that\r\nsurround them. `{{person}}` is a tag, as is `{{#person}}`. In both examples we\r\nrefer to `person` as the tag's key.\r\n\r\nThere are several types of tags available in lustache.\r\n\r\n### Variables\r\n\r\nThe most basic tag type is a simple variable. A `{{name}}` tag renders the value\r\nof the `name` key in the current context. If there is no such key, nothing is\r\nrendered.\r\n\r\nAll variables are HTML-escaped by default. If you want to render unescaped HTML,\r\nuse the triple mustache: `{{{name}}}`. You can also use `&` to unescape a\r\nvariable.\r\n\r\nTemplate:\r\n\r\n    * {{name}}\r\n    * {{age}}\r\n    * {{company}}\r\n    * {{{company}}}\r\n    * {{&company}}\r\n\r\nView:\r\n\r\n    {\r\n      name = \"Chris\",\r\n      company = \"<b>GitHub</b>\"\r\n    }\r\n\r\nOutput:\r\n\r\n    * Chris\r\n    *\r\n    * &lt;b&gt;GitHub&lt;/b&gt;\r\n    * <b>GitHub</b>\r\n    * <b>GitHub</b>\r\n\r\nDot notation may be used to access keys that are properties of\r\nobjects in a view.\r\n\r\nTemplate:\r\n\r\n    * {{name.first}} {{name.last}}\r\n    * {{age}}\r\n\r\nView:\r\n\r\n    {\r\n      name = {\r\n        first = \"Michael\",\r\n        last = \"Jackson\"\r\n      },\r\n      age = \"RIP\"\r\n    }\r\n\r\nOutput:\r\n\r\n    * Michael Jackson\r\n    * RIP\r\n\r\n### Sections\r\n\r\nSections render blocks of text one or more times, depending on the value of the\r\nkey in the current context.\r\n\r\nA section begins with a pound and ends with a slash. That is, `{{#person}}`\r\nbegins a `person` section, while `{{/person}}` ends it. The text between the two\r\ntags is referred to as that section's \"block\".\r\n\r\nThe behavior of the section is determined by the value of the key.\r\n\r\n#### False Values or Empty Lists\r\n\r\nIf the `person` key exists and has a value of `null`, `undefined`, or `false`,\r\nor is an empty list, the block will not be rendered.\r\n\r\nTemplate:\r\n\r\n    Shown.\r\n    {{#person}}\r\n    Never shown!\r\n    {{/person}}\r\n\r\nView:\r\n\r\n    {\r\n      person = false\r\n    }\r\n\r\nOutput:\r\n\r\n    Shown.\r\n\r\n#### Non-Empty Lists\r\n\r\nIf the `person` key exists and is not `null`, `undefined`, or `false`, and is\r\nnot an empty list the block will be rendered one or more times.\r\n\r\nWhen the value is a list, the block is rendered once for each item in the list.\r\nThe context of the block is set to the current item in the list for each\r\niteration. In this way we can loop over collections.\r\n\r\nTemplate:\r\n\r\n    {{#stooges}}\r\n    <b>{{name}}</b>\r\n    {{/stooges}}\r\n\r\nView:\r\n\r\n    {\r\n      stooges = [\r\n        { name = \"Moe\" },\r\n        { name = \"Larry\" },\r\n        { name = \"Curly\" }\r\n      ]\r\n    }\r\n\r\nOutput:\r\n\r\n    <b>Moe</b>\r\n    <b>Larry</b>\r\n    <b>Curly</b>\r\n\r\nWhen looping over an array of strings, a `.` can be used to refer to the current\r\nitem in the list.\r\n\r\nTemplate:\r\n\r\n    {{#musketeers}}\r\n    * {{.}}\r\n    {{/musketeers}}\r\n\r\nView:\r\n\r\n    {\r\n      musketeers = { \"Athos\", \"Aramis\", \"Porthos\", \"D'Artagnan\" }\r\n    }\r\n\r\nOutput:\r\n\r\n    * Athos\r\n    * Aramis\r\n    * Porthos\r\n    * D'Artagnan\r\n\r\nIf the value of a section variable is a function, it will be called in the\r\ncontext of the current item in the list on each iteration.\r\n\r\nTemplate:\r\n\r\n    {{#beatles}}\r\n    * {{name}}\r\n    {{/beatles}}\r\n\r\nView:\r\n\r\n    {\r\n      beatles = {\r\n        { first_name = \"John\", last_name = \"Lennon\" },\r\n        { first_name = \"Paul\", last_name = \"McCartney\" },\r\n        { first_name = \"George\", last_name = \"Harrison\" },\r\n        { first_name = \"Ringo\", last_name = \"Starr\" }\r\n      },\r\n      name = function (self)\r\n        return self.first_name .. \" \" .. self.last_name\r\n      end\r\n    }\r\n\r\nOutput:\r\n\r\n    * John Lennon\r\n    * Paul McCartney\r\n    * George Harrison\r\n    * Ringo Starr\r\n\r\n#### Functions\r\n\r\nIf the value of a section key is a function, it is called with the section's\r\nliteral block of text, un-rendered, as its first argument. The second argument\r\nis a special rendering function that uses the current view as its view argument.\r\nIt is called in the context of the current view object.\r\n\r\nTemplate:\r\n\r\n    {{#bold}}Hi {{name}}.{{/bold}}\r\n\r\nView:\r\n\r\n    {\r\n      name = \"Tater\",\r\n      bold = function (self)\r\n        return function (text, render) \r\n          return \"<b>\" .. render(text) .. \"</b>\"\r\n        end\r\n      end\r\n    }\r\n\r\nOutput:\r\n\r\n    <b>Hi Tater.</b>\r\n\r\n### Inverted Sections\r\n\r\nAn inverted section opens with `{{^section}}` instead of `{{#section}}`. The\r\nblock of an inverted section is rendered only if the value of that section's tag\r\nis `null`, `undefined`, `false`, or an empty list.\r\n\r\nTemplate:\r\n\r\n    {{#repos}}<b>{{name}}</b>{{/repos}}\r\n    {{^repos}}No repos :({{/repos}}\r\n\r\nView:\r\n\r\n    {\r\n      \"repos\": {}\r\n    }\r\n\r\nOutput:\r\n\r\n    No repos :(\r\n\r\n### Comments\r\n\r\nComments begin with a bang and are ignored. The following template:\r\n\r\n    <h1>Today{{! ignore me }}.</h1>\r\n\r\nWill render as follows:\r\n\r\n    <h1>Today.</h1>\r\n\r\nComments may contain newlines.\r\n\r\n### Partials\r\n\r\nPartials begin with a greater than sign, like {{> box}}.\r\n\r\nPartials are rendered at runtime (as opposed to compile time), so recursive\r\npartials are possible. Just avoid infinite loops.\r\n\r\nThey also inherit the calling context. Whereas in ERB you may have this:\r\n\r\n    <%= partial :next_more, :start => start, :size => size %>\r\n\r\nMustache requires only this:\r\n\r\n    {{> next_more}}\r\n\r\nWhy? Because the `next_more.mustache` file will inherit the `size` and `start`\r\nvariables from the calling context. In this way you may want to think of\r\npartials as includes, or template expansion, even though it's not literally true.\r\n\r\nFor example, this template and partial:\r\n\r\n    base.mustache:\r\n    <h2>Names</h2>\r\n    {{#names}}\r\n      {{> user}}\r\n    {{/names}}\r\n\r\n    user.mustache:\r\n    <strong>{{name}}</strong>\r\n\r\nCan be thought of as a single, expanded template:\r\n\r\n    <h2>Names</h2>\r\n    {{#names}}\r\n      <strong>{{name}}</strong>\r\n    {{/names}}\r\n\r\nIn lustache an object of partials may be passed as the third argument to\r\n`lustache.render`. The object should be keyed by the name of the partial, and\r\nits value should be the partial text.\r\n\r\n### Set Delimiter\r\n\r\nSet Delimiter tags start with an equals sign and change the tag delimiters from\r\n`{{` and `}}` to custom strings.\r\n\r\nConsider the following contrived example:\r\n\r\n    * {{ default_tags }}\r\n    {{=<% %>=}}\r\n    * <% erb_style_tags %>\r\n    <%={{ }}=%>\r\n    * {{ default_tags_again }}\r\n\r\nHere we have a list with three items. The first item uses the default tag style,\r\nthe second uses ERB style as defined by the Set Delimiter tag, and the third\r\nreturns to the default style after yet another Set Delimiter declaration.\r\n\r\nAccording to [ctemplates](http://google-ctemplate.googlecode.com/svn/trunk/doc/howto.html),\r\nthis \"is useful for languages like TeX, where double-braces may occur in the\r\ntext and are awkward to use for markup.\"\r\n\r\nCustom delimiters may not contain whitespace or the equals sign.\r\n\r\n## Testing\r\n\r\nlustache uses the [lunit](http://www.nessie.de/mroth/lunit/) testing\r\nframework. In order to run the tests you'll need to install lunit, which\r\ncan be done through [luarocks](http://luarocks.org/) or your choice of\r\nlua package manager.\r\n\r\n    $ luarocks install lunit\r\n\r\nThen run the tests.\r\n\r\n    $ lunit spec/*\r\n\r\n## Thanks\r\n\r\nlustache began as a direct port of [Jan Lehnardt](https://github.com/janl)'s \r\nexcellent [mustache.js](https://github.com/janl/mustache.js). It would be\r\nsignificantly further behind without the available code from the many\r\ncontributors. <3\r\n\r\n## License\r\n\r\nMIT licensed. View LICENSE file for more details.\r\n","name":"Lustache"}